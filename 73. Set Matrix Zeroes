# class Solution:
#     def setZeroes(self, matrix: List[List[int]]) -> None:
#         """
#         Do not return anything, modify matrix in-place instead.
#         """
#         ROWS, COLS = len(matrix), len(matrix[0])
#         rowZero = False

#         # determine which rows/cols need to be zero
#         for r in range(ROWS):
#             for c in range(COLS):
#                 if matrix[r][c] == 0:
#                     matrix[0][c] = 0
#                     if r > 0:
#                         matrix[r][0] = 0
#                     else:
#                         rowZero = True

#         for r in range(1, ROWS):
#             for c in range(1, COLS):
#                 if matrix[0][r] == 0 or matrix[r][0] == 0:
#                     matrix[r][c] = 0

#         if matrix[0][0] == 0:
#             for r in range(ROWS):
#                 matrix[r][0] = 0
            
#         if rowZero:
#             for c in range(COLS):
#                 matrix[0][c] = 0

class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        rLen = len(matrix)
        cLen = len(matrix[0])
        rows = [False] * rLen
        cols = [False] * cLen
        for r in range(rLen):
            for c in range(cLen): # Traverse through matrix and save rows and cols that must be 0
                if matrix[r][c] == 0:
                    rows[r] = True
                    cols[c] = True
        for i, r in enumerate(rows): # iterate through rows that must be 0 and set to 0
            if r:
                for c in range(cLen):
                    matrix[i][c] = 0
        for j, c in enumerate(cols): # iterate through cols that must be 0 and set to 0
            if c:
                for r in range(rLen):
                    matrix[r][j] = 0


        